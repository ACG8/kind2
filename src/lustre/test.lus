/* This is a comment 
  over several lines */ 

(* OCaml-style comments are 
  also valid -- and that officially *)

-- Free constants, must have a type
const a1, a2, a3: a;

-- Defined constants without type
const b1 = 1;
      pi = 3.14;

-- Defined constant with optional type 
const c1 : bool = true;
      c2 = 5;
      c3, c4 : real;


-- Predefined type bool
type a = bool;

-- Declaration of multiple aliases for predefined type int
type b, c = int;

-- Predefined type real
type d = real;

-- User-defined type
type e = a;

-- Tuple type
type f = [int, real, bool];
type g = [d, [int, bool]];

-- Record type
type h = struct { one : int; two : bool };

-- Record types can be nested, struct is optional
type i = { one: struct { a : int; b: bool };  two : bool };

-- Enum type
type e = enum {blue, green, red };

-- Array types
type f = int^5;
type g = int^5^5;
type h = int^5*h;


node x() returns ();
let tel;

node y<<type t>>() returns ();
var c : t;
let c = 0 -> 1; tel;
