/* This is a comment 
  over several lines */ 

(* OCaml-style comments are 
  also valid -- and that officially *)

-- Free constants, must have a type
const a1, a2, a3: a;

-- Defined constants without type
const b1 = 1;
      pi = 3.14;

-- Defined constant with optional type 
const c1 : bool = true;
      c2 = 5;
      c3, c4 : real;


-- Predefined type bool
type a = bool;

-- Declaration of multiple aliases for predefined type int
type b, c = int;

-- Predefined type real
type d = real;

-- User-defined type
type e = a;

-- Tuple type
type f = [int, real, bool];
type g = [d, [int, bool]];

-- Record type
type h = struct { one : int; two : bool };

-- Record types can be nested, struct is optional
type i = { one: struct { a : int; b: bool };  two : bool };

-- Enum type
type e = enum {blue, green, red };

-- Array types
type f = int^5;
type g = int^5^5;
type h = int^5*h;

-- A node declaration
node x 
  (a, b: [int, [bool, bool]]; 
   const c: z; d, e: int when a; 
   (f, g: int; h: real) when b) 
returns 
  (x: y when z; 
   (a, b: [int, [bool, real]]; c: struct {one: real; two: int }) when x;
   d: int);
-- Variable declarations are optional
let 
tel;

node y (const a: bool) returns (b: int);
-- A local (free) constant declaration
const c : int; d = 1;
let
  -- Main node annotation, anything can follow, semicolon is not necessary
  --%MAIN
  --%MAIN;
  --%MAIN xyz
  b = 1;
  (exxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, fxxxxxxxxxxxxxxxxxxxx, gxxxxxxxxxxxxxxxxxxxx) = x(c);
  assert x;

  -- Property, must be terminated with a semicolon
  --%PROPERTY k; 

  -- Annotations can be commented 
  -- --%PROPERTY j;

-- A node can end with tel; tel. or tel
tel.


--@requires x;
--@ensures y;
node g () returns ();
let tel;

-- A parameterized node 
node y<<type t>> () returns ();
var c : t when true; 
let c = 0 -> 1; tel

-- An uninterpreted function, parameters cannot be clocked or constant
function y (a: bool; c: int) returns (b: int);
