(define-pred greycounter

  ((reset Bool)
   (out Bool)
   (a Bool)
   (b Bool))
  
  (init 
   (and
    (= b false)
    (= a false)
    (= out (and a b))))
  
  (trans
   (= (prime b) (and (not (prime reset)) a))
   (= (prime a) (and (not (prime reset)) (not b)))
   (= (prime out) (and (prime a) (prime b)))))

(define-pred initcounter
  
  ((reset Bool)
   (max Int :const)
   (out Bool)
   (t Int))

  (init
   (and
    (= t 0)
    (= out (= t 2))))
  
  (trans
   (and
    (= (prime t) (ite (or (prime reset) (= t max)) 0 (+ t 1)))
    (= (prime out) (= (prime t) 2)))))

(define-pred top
  ((reset Bool)
   (OK Bool)
   (b Bool)
   (d Bool)
   (g.a Bool)
   (g.b Bool)
   (i.t Int))

  (init
   (and
    (= OK (= b d))
    (greycounter.init reset b g.a g.b)
    (intcounter.init reset 3 d i.t)))

  (trans
   (and
    (= (prime OK) (= (prime b) (prime d)))
    (greycounter.trans reset.1 b.1 g.a.1 g.a.1 reset.0 b.0 g.a.0 g.b.0)
    (intcounter.trans reset.1 3 d.1 i.t.1 reset.0 d.0 i.t.0))))

(check-prop top (("OK" OK)))

